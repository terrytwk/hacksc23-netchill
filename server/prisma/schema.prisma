// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String

  first_name String?
  last_name String?
  organization String?
  position String?
  phone Int?
  work_phone Int?
  bio String?
  latitude Decimal?
  longitude Decimal?
  profile_pic String?

  links Link[] // unused for now
  career_tags UserToCareerTag[]
  hobby_tags UserToHobbyTag[]
  matches UserToMatch[]
  contacts Contact[] @relation("UserContacts")
  contactsOf Contact[]
}

// unused for now
model Link {
  id Int @id @default(autoincrement())
  link String

  user User @relation(fields: [user_id], references: [id])
  user_id Int
}

model CareerTag {
  id Int @id @default(autoincrement())
  name String @unique

  users UserToCareerTag[]
}

model UserToCareerTag {
  user User @relation(fields: [user_id], references: [id])
  user_id Int
  tag CareerTag @relation(fields: [tag_id], references: [id])
  tag_id Int

  @@id([user_id, tag_id])
}

model HobbyTag {
  id Int @id @default(autoincrement())
  name String @unique

  users UserToHobbyTag[]
}

model UserToHobbyTag {
  user User @relation(fields: [user_id], references: [id])
  user_id Int
  tag HobbyTag @relation(fields: [tag_id], references: [id])
  tag_id Int

  @@id([user_id, tag_id])
}

model Match {
  id Int @id @default(autoincrement())
  assignedAt DateTime @default(now())

  users UserToMatch[]
  contacts Contact[]
}

model UserToMatch {
  match Match @relation(fields: [match_id], references: [id])
  match_id Int
  user User @relation(fields: [user_id], references: [id])
  user_id Int

  @@id([match_id, user_id])
}

model Category {
  id Int @id @default(autoincrement())
  description String @unique

  contacts Contact[]
}

model Contact {
  id Int @id @default(autoincrement())
  notes String?
  contact_frequency ContactFrequency?

  relating_user User @relation("UserContacts", fields: [relating_user_id], references: [id])
  relating_user_id Int
  related_user User @relation(fields: [related_user_id], references: [id])
  related_user_id Int
  category Category? @relation(fields: [category_id], references: [id])
  category_id Int?
  match Match @relation(fields: [match_id], references: [id])
  match_id Int
}

enum ContactFrequency {
  ONE_WEEK
  TWO_WEEKS
  ONE_MONTH
  SIX_MONTHS
  ONE_YEAR
}
